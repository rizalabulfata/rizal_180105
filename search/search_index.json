{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-\\.]+"},"docs":[{"location":"","text":"About Me Nama : Rizal Abul Fata NIM : 180411100105","title":"Home"},{"location":"SPAL/","text":"Sistem Persamaan Aljabar Linear \u00b6 a_{1}x_{1}+a_{2}x_{2}+...+a_{n}x_{n}=b dari contoh persamaa diatas dimana: a1, a2,\u2026, an, dan b adalah konstanta dan x1, x2,\u2026, xn adalah variabel yang tidak diketahui. A. Pengertian \u00b6 System persamaan linear adalah himpunan beberapa persamaan linear dalam variabel x1, x2,\u2026, xn. Barisan bilangan s1, s2,\u2026 sn adalah solusi system persamaan linear apabila x1= s1 , x2= s2 \u2026 xn =sn memenuhi setiap persamaan linear dalam system. Ada tiga kemungkin dalam penyelesaian SPL yaitu mempunyai hanya 1 penyelesaian, mempunyai banyak penyelesaian, atau bahkan tidak mempunyai penyelesaian: hanya mempunyai 1 penyelesaian seperti : x1=2, and x2=1 \\begin{aligned}x_{1}+x_{2}=3\\\\ x_{1}-x_{2}=1\\end{aligned} mempunyai banyak penyelesaian seperti : = x1=1, x2=2, and x3=-1 \\begin{aligned}4x_{1}-x_{2}+3x_{3}=-1\\\\ 3x_{1}+x_{2}+9x_{3}=-4\\end{aligned} tidak mempunyai penyelesaian \\begin{aligned}x_{1}+x_{2}=4\\\\ x_{1}+x_{2}=3\\end{aligned} untuk penyelesaian tersebut dapat menggunakan System persamaan Linear dalam Augmented Matriks, yang nantinya akan banyak metode dalam menggunakannya. \\begin{bmatrix} a_{11} & a_{12} & \\ldots & a,n & b, \\\\ a_{21} & a_{12} & \\ldots & a_{2n} & b_{2} \\\\ \\vdots & \\vdots & & \\vdots & \\vdots \\\\ a_{m_{1}} & a_{m_{2}} & \\ldots & a_{mn} & b_{m} \\end{bmatrix} contoh: \\begin{aligned}x_{1}+5x_{2}-2x_{3}=3\\\\ 2x_{1}+4x_{2}-3x_{3}=1\\\\ -2x_{1}+6x_{2}-5x_{3}=2 \\end{aligned} \u200b Augmented Matriks \\begin{bmatrix} 1 & 5 & -2 & 3 \\\\ 2 & 4 & -3 & 1 \\\\ -2 & 6 & -5 & 2 \\end{bmatrix} Metode untuk menyelesaikan SPL adalah dengan mengubah system yang ada menjadi system yang lebih sederhana. Secara umum langkah langkahnya diberikan di bawah ini. Mengalikan satu atau lebih dari persamaan yang ada dengan suatu pengali Mempertukarkan letak persamaan Menambah suatu persamaan dengan persamaan yang lain B. Mencari Penyelesaian Sistem Persamaan Linear \u00b6 untuk mencari penyelesain Sistem Persamaan Linier metodenya terdapat 2 maca, yaitu : A. Metode eliminasi: \u00b6 gauss gasuss jordan B. Metode Iterasi: \u00b6 Gauss Seidel Jacobi Metode Eliminasi Gauss \u00b6 Konsepnya didasarkan pada gagasan mereduksi matriks yang diperbanyak menjadi bentuk yang cukup sederhana sehingga sistem persamaan tersebut bisa diselesaikan dalam bentuk substitusi contoh : \\begin{aligned} 2x+3y+z=5\\\\ 4x+4y-3z=3\\\\ 2x-3y+z=-1 \\end{aligned} Menuliskan bentuk augmented Matriks \\begin{bmatrix} 2 & 3 & -1 & 5 \\\\ 4 & 4 & -3 & 3 \\\\ 2 & -3 & 1 & -1 \\end{bmatrix} Hilangkan kolom pertama di bawah diagonal. Gantikan baris 2 dengan baris 2-2xbaris 1 \\begin{bmatrix} 2 & 3 & -1 & 5 \\\\ 0 & -2 & -1 & -7 \\\\ 2 & -3 & 1 & -1 \\end{bmatrix} ganti baris 3 dengan baris 3-baris 1 \\begin{bmatrix} 2 & 3 & -1 & 5 \\\\ 0 & -2 & -1 & -7 \\\\ 0 & -6 & 2 & -6 \\end{bmatrix} Hilangkan kolom kedua dbawah diagonal. Gantikan baris 3 dengan baris 3-3xbaris2 \\begin{bmatrix} 2 & 3 & -1 & 5 \\\\ 0 & -2 & -1 & -7 \\\\ 0 & 0 & 5 & 15 \\end{bmatrix} gunakan substitusi untuk mendapatkan penyelesaian \\begin{aligned} baris/row3\\rightarrow 5z=15\\rightarrow z=3\\\\ baris/row2\\rightarrow -2y-z=-7\\rightarrow y=2\\\\ baris/row1\\rightarrow 2y-3y+z=5\\rightarrow x=1 \\end{aligned} Berikut perhitungan menggunakan python dengan tambahan modul numpy python import numpy as np ```python a = [[2,1,-1, 8], [-3,-1,2,-11], [-2,1,2,-3]] n = len(a[0])-1 x = np.zeros(len(a[0])) for i in range(n): if a[i][i] == 0.0: sys.exit('tidak boleh dibagi 0') for j in range ( i + 1 , n ) : ratio = a [ j ][ i ]/ a [ i ][ i ] for k in range ( n + 1 ) : a [ j ][ k ] = a [ j ][ k ] - ratio * a [ i ][ k ] x[n-1] = a[n-1][n]/a[n-1][n-1] for i in range(n-2,-1,-1): x[i] = a[i][n] for j in range ( i + 1 , n ) : x [ i ] = x [ i ] - a [ i ][ j ]* x [ j ] x [ i ] = x [ i ]/ a [ i ][ i ] print(\"hasilnya : \") print(f\"x = {x[0]}\\ny = {x[1]}\\nz = {x[2]}\") ``` python hasilnya : x = 2.0 y = 3.0 z = -1.0 Metode Eliminasi Gauss-Jordan \u00b6 Eliminasi Gauss-Jordan adalah pengembangan dari eliminasi Gauss yang hasilnya lebih sederhana lagi. Caranya adalah dengan meneruskan operasi baris dari eliminasi Gauss sehingga menghasilkan matriks yang Eselon-baris. Ini juga dapat digunakan sebagai salah satu metode penyelesaian persamaan linear dengan menggunakan matriks. Metode eliminasi Gaus/Gaus-Jordan dilakukan dengan menggunakan langkah-langkah pada Operasi Baris Elementer (OBE). Sebelum melakukan OBE, bentuk umum dari sistem persamaan linear dirubah menjadi matriks yang diperbesar. contoh: \\begin{aligned} 2x+4y-3z=1\\\\ 3x+6y-5z=0\\\\ x+y+2z=9 \\end{aligned} jawab: Menuliskan bentuk augmented Matriks \\begin{bmatrix} 2 & 4 & -3 & 1 \\\\ 3 & 6 & -5 & 0 \\\\ 1 & 1 & 2 & 9 \\end{bmatrix} tukarkan baris ke 1 dengan baris ke 3 \\begin{bmatrix} 1 & 1 & 2 & 9\\\\ 3 & 6 & -5 & 0 \\\\ 2 & 4 & -3 & 1 \\end{bmatrix} kalikan (-3) pada baris 1 kemudian jumlahkan ke baris 2 \\begin{bmatrix} 1 & 1 & 2 & 9 \\\\ 0 & 3 & -11 & -27 \\\\ 2 & 4 & -3 & 1 \\end{bmatrix} kalikan (-2) pada baris 1 kemudian jumlahkan ke baris 3 \\begin{bmatrix} 1 & 1 & 2 & 9 \\\\ 0 & 3 & -11 & -27 \\\\ 0 & 2 & -7 & -17 \\end{bmatrix} kalikan 1/3 pada baris 2 \\begin{bmatrix} 1 & 1 & 2 & 9 \\\\ 0 & 1 & -11/3 & -9 \\\\ 0 & 2 & -7 & -17 \\end{bmatrix} kalikan (-2) pada baris 2 kemudian jumlahkan ke baris 3 \\begin{bmatrix} 1 & 1 & 2 & 9 \\\\ 0 & 1 & -11/3 & -9 \\\\ 0 & 0 & 1/3 & 1 \\end{bmatrix} kalikan 3 pada baris 3 \\begin{bmatrix} 1 & 1 & 2 & 9 \\\\ 0 & 1 & -11/3 & -9 \\\\ 0 & 0 & 1 & 3 \\end{bmatrix} kalikan 11/3 pada baris 3 kemudian jumlahkan baris 3 \\begin{bmatrix} 1 & 1 & 2 & 9 \\\\ 0 & 1 & 0 & 2 \\\\ 0 & 0 & 1 & 3 \\end{bmatrix} kalikan (-2) pada baris 3 kemudian jumlahkan ke baris 1 \\begin{bmatrix} 1 & 1 & 0 & 3 \\\\ 0 & 1 & 0 & 2 \\\\ 0 & 0 & 1 & 3 \\end{bmatrix} kalikan (-1) pada baris 2 kemudian jumlahkan ke baris 1 \\begin{bmatrix} 1 & 0 & 0 & 1 \\\\ 0 & 1 & 0 & 2 \\\\ 0 & 0 & 1 & 3 \\end{bmatrix} Hasil dari operasi baris tersebut kemudian dirubah kembali menjadi bentuk umum sistem persamaan linear. \\begin{aligned} x+0y+0z=1\\\\ 0x+y+0z=2\\\\ 0x+0y+z=3 \\end{aligned} Sistem persamaan linear yang diperoleh dapat ditulis sebagai berikut. \\begin{aligned} x=1\\\\ y=2\\\\ z=3 \\end{aligned} Jadi penyelesaian dari sistem persamaan linear tersebut adalah \\begin{aligned} x=1, \\ y=2, \\ z=3 \\end{aligned} Metode Iterasi Seidel \u00b6 Metode interasi Gauss-Seidel adalah metode yang menggunakan proses iterasi hingga diperoleh nilai-nilai yang berubah-ubah. Metode iterasi Gauss-Seidel dikembangkan dari gagasan metode iterasi pada solusi persamaan tak linier. rumus dan metode gass seidel: x_{i}^{\\left( k\\right) }=\\dfrac{1}{a_{ij}}\\left( b_{i}-\\sum _{j=1}a_{ij}x_{j}^{\\left( k\\right) }-\\sum _{j=i+1}a_{ij}x_{j}^{\\left( k-1\\right) }\\right),i=1,2,...,n contoh: \\begin{aligned} 10x_{1}-x_{2}-2x_{3}=6\\\\ -x_{1}+x11_{2}-x_{3}+3x_{4}=25\\\\ 2x_{1}-x11_{2}+10x_{3}-x_{4}=-11\\\\ 3x_{2}-x11_{3}+8x_{4}=15 \\end{aligned} jawab: Menuliskan bentuk augmented Matriks A = \\begin{bmatrix} 10 & -1 & 2 & 0\\\\ -1 & 11 & -1 & 3\\\\ 2 & -1 & 10 & -1\\\\ 0 & 3 & -1 & 8 \\end{bmatrix} B = \\begin{bmatrix} 6\\\\ 25\\\\ -11\\\\ 15 \\end{bmatrix} Nilai pendekatan awal (0,0,0,0) g g Metode Iterasi Jacobi Metode Jacobi merupakan salah satu metode penyelesaian sistem persamaan linear (baca: matriks) berdimensi banyak (baca: lebih dari 2). Untuk matriks dengan dimensi kecil (kurang atau sama dengan dua), lebih efektif diselesaikan dengan aturan eliminasi atau metode Cramer. contoh: g g g","title":"SPAL"},{"location":"SPAL/#sistem_persamaan_aljabar_linear","text":"a_{1}x_{1}+a_{2}x_{2}+...+a_{n}x_{n}=b dari contoh persamaa diatas dimana: a1, a2,\u2026, an, dan b adalah konstanta dan x1, x2,\u2026, xn adalah variabel yang tidak diketahui.","title":"Sistem Persamaan Aljabar Linear"},{"location":"SPAL/#a_pengertian","text":"System persamaan linear adalah himpunan beberapa persamaan linear dalam variabel x1, x2,\u2026, xn. Barisan bilangan s1, s2,\u2026 sn adalah solusi system persamaan linear apabila x1= s1 , x2= s2 \u2026 xn =sn memenuhi setiap persamaan linear dalam system. Ada tiga kemungkin dalam penyelesaian SPL yaitu mempunyai hanya 1 penyelesaian, mempunyai banyak penyelesaian, atau bahkan tidak mempunyai penyelesaian: hanya mempunyai 1 penyelesaian seperti : x1=2, and x2=1 \\begin{aligned}x_{1}+x_{2}=3\\\\ x_{1}-x_{2}=1\\end{aligned} mempunyai banyak penyelesaian seperti : = x1=1, x2=2, and x3=-1 \\begin{aligned}4x_{1}-x_{2}+3x_{3}=-1\\\\ 3x_{1}+x_{2}+9x_{3}=-4\\end{aligned} tidak mempunyai penyelesaian \\begin{aligned}x_{1}+x_{2}=4\\\\ x_{1}+x_{2}=3\\end{aligned} untuk penyelesaian tersebut dapat menggunakan System persamaan Linear dalam Augmented Matriks, yang nantinya akan banyak metode dalam menggunakannya. \\begin{bmatrix} a_{11} & a_{12} & \\ldots & a,n & b, \\\\ a_{21} & a_{12} & \\ldots & a_{2n} & b_{2} \\\\ \\vdots & \\vdots & & \\vdots & \\vdots \\\\ a_{m_{1}} & a_{m_{2}} & \\ldots & a_{mn} & b_{m} \\end{bmatrix} contoh: \\begin{aligned}x_{1}+5x_{2}-2x_{3}=3\\\\ 2x_{1}+4x_{2}-3x_{3}=1\\\\ -2x_{1}+6x_{2}-5x_{3}=2 \\end{aligned} \u200b Augmented Matriks \\begin{bmatrix} 1 & 5 & -2 & 3 \\\\ 2 & 4 & -3 & 1 \\\\ -2 & 6 & -5 & 2 \\end{bmatrix} Metode untuk menyelesaikan SPL adalah dengan mengubah system yang ada menjadi system yang lebih sederhana. Secara umum langkah langkahnya diberikan di bawah ini. Mengalikan satu atau lebih dari persamaan yang ada dengan suatu pengali Mempertukarkan letak persamaan Menambah suatu persamaan dengan persamaan yang lain","title":"A. Pengertian"},{"location":"SPAL/#b_mencari_penyelesaian_sistem_persamaan_linear","text":"untuk mencari penyelesain Sistem Persamaan Linier metodenya terdapat 2 maca, yaitu :","title":"B. Mencari Penyelesaian Sistem Persamaan Linear"},{"location":"SPAL/#a_metode_eliminasi","text":"gauss gasuss jordan","title":"A. Metode eliminasi:"},{"location":"SPAL/#b_metode_iterasi","text":"Gauss Seidel Jacobi","title":"B. Metode Iterasi:"},{"location":"SPAL/#metode_eliminasi_gauss","text":"Konsepnya didasarkan pada gagasan mereduksi matriks yang diperbanyak menjadi bentuk yang cukup sederhana sehingga sistem persamaan tersebut bisa diselesaikan dalam bentuk substitusi contoh : \\begin{aligned} 2x+3y+z=5\\\\ 4x+4y-3z=3\\\\ 2x-3y+z=-1 \\end{aligned} Menuliskan bentuk augmented Matriks \\begin{bmatrix} 2 & 3 & -1 & 5 \\\\ 4 & 4 & -3 & 3 \\\\ 2 & -3 & 1 & -1 \\end{bmatrix} Hilangkan kolom pertama di bawah diagonal. Gantikan baris 2 dengan baris 2-2xbaris 1 \\begin{bmatrix} 2 & 3 & -1 & 5 \\\\ 0 & -2 & -1 & -7 \\\\ 2 & -3 & 1 & -1 \\end{bmatrix} ganti baris 3 dengan baris 3-baris 1 \\begin{bmatrix} 2 & 3 & -1 & 5 \\\\ 0 & -2 & -1 & -7 \\\\ 0 & -6 & 2 & -6 \\end{bmatrix} Hilangkan kolom kedua dbawah diagonal. Gantikan baris 3 dengan baris 3-3xbaris2 \\begin{bmatrix} 2 & 3 & -1 & 5 \\\\ 0 & -2 & -1 & -7 \\\\ 0 & 0 & 5 & 15 \\end{bmatrix} gunakan substitusi untuk mendapatkan penyelesaian \\begin{aligned} baris/row3\\rightarrow 5z=15\\rightarrow z=3\\\\ baris/row2\\rightarrow -2y-z=-7\\rightarrow y=2\\\\ baris/row1\\rightarrow 2y-3y+z=5\\rightarrow x=1 \\end{aligned} Berikut perhitungan menggunakan python dengan tambahan modul numpy python import numpy as np ```python a = [[2,1,-1, 8], [-3,-1,2,-11], [-2,1,2,-3]] n = len(a[0])-1 x = np.zeros(len(a[0])) for i in range(n): if a[i][i] == 0.0: sys.exit('tidak boleh dibagi 0') for j in range ( i + 1 , n ) : ratio = a [ j ][ i ]/ a [ i ][ i ] for k in range ( n + 1 ) : a [ j ][ k ] = a [ j ][ k ] - ratio * a [ i ][ k ] x[n-1] = a[n-1][n]/a[n-1][n-1] for i in range(n-2,-1,-1): x[i] = a[i][n] for j in range ( i + 1 , n ) : x [ i ] = x [ i ] - a [ i ][ j ]* x [ j ] x [ i ] = x [ i ]/ a [ i ][ i ] print(\"hasilnya : \") print(f\"x = {x[0]}\\ny = {x[1]}\\nz = {x[2]}\") ``` python hasilnya : x = 2.0 y = 3.0 z = -1.0","title":"Metode Eliminasi Gauss"},{"location":"SPAL/#metode_eliminasi_gauss-jordan","text":"Eliminasi Gauss-Jordan adalah pengembangan dari eliminasi Gauss yang hasilnya lebih sederhana lagi. Caranya adalah dengan meneruskan operasi baris dari eliminasi Gauss sehingga menghasilkan matriks yang Eselon-baris. Ini juga dapat digunakan sebagai salah satu metode penyelesaian persamaan linear dengan menggunakan matriks. Metode eliminasi Gaus/Gaus-Jordan dilakukan dengan menggunakan langkah-langkah pada Operasi Baris Elementer (OBE). Sebelum melakukan OBE, bentuk umum dari sistem persamaan linear dirubah menjadi matriks yang diperbesar. contoh: \\begin{aligned} 2x+4y-3z=1\\\\ 3x+6y-5z=0\\\\ x+y+2z=9 \\end{aligned} jawab: Menuliskan bentuk augmented Matriks \\begin{bmatrix} 2 & 4 & -3 & 1 \\\\ 3 & 6 & -5 & 0 \\\\ 1 & 1 & 2 & 9 \\end{bmatrix} tukarkan baris ke 1 dengan baris ke 3 \\begin{bmatrix} 1 & 1 & 2 & 9\\\\ 3 & 6 & -5 & 0 \\\\ 2 & 4 & -3 & 1 \\end{bmatrix} kalikan (-3) pada baris 1 kemudian jumlahkan ke baris 2 \\begin{bmatrix} 1 & 1 & 2 & 9 \\\\ 0 & 3 & -11 & -27 \\\\ 2 & 4 & -3 & 1 \\end{bmatrix} kalikan (-2) pada baris 1 kemudian jumlahkan ke baris 3 \\begin{bmatrix} 1 & 1 & 2 & 9 \\\\ 0 & 3 & -11 & -27 \\\\ 0 & 2 & -7 & -17 \\end{bmatrix} kalikan 1/3 pada baris 2 \\begin{bmatrix} 1 & 1 & 2 & 9 \\\\ 0 & 1 & -11/3 & -9 \\\\ 0 & 2 & -7 & -17 \\end{bmatrix} kalikan (-2) pada baris 2 kemudian jumlahkan ke baris 3 \\begin{bmatrix} 1 & 1 & 2 & 9 \\\\ 0 & 1 & -11/3 & -9 \\\\ 0 & 0 & 1/3 & 1 \\end{bmatrix} kalikan 3 pada baris 3 \\begin{bmatrix} 1 & 1 & 2 & 9 \\\\ 0 & 1 & -11/3 & -9 \\\\ 0 & 0 & 1 & 3 \\end{bmatrix} kalikan 11/3 pada baris 3 kemudian jumlahkan baris 3 \\begin{bmatrix} 1 & 1 & 2 & 9 \\\\ 0 & 1 & 0 & 2 \\\\ 0 & 0 & 1 & 3 \\end{bmatrix} kalikan (-2) pada baris 3 kemudian jumlahkan ke baris 1 \\begin{bmatrix} 1 & 1 & 0 & 3 \\\\ 0 & 1 & 0 & 2 \\\\ 0 & 0 & 1 & 3 \\end{bmatrix} kalikan (-1) pada baris 2 kemudian jumlahkan ke baris 1 \\begin{bmatrix} 1 & 0 & 0 & 1 \\\\ 0 & 1 & 0 & 2 \\\\ 0 & 0 & 1 & 3 \\end{bmatrix} Hasil dari operasi baris tersebut kemudian dirubah kembali menjadi bentuk umum sistem persamaan linear. \\begin{aligned} x+0y+0z=1\\\\ 0x+y+0z=2\\\\ 0x+0y+z=3 \\end{aligned} Sistem persamaan linear yang diperoleh dapat ditulis sebagai berikut. \\begin{aligned} x=1\\\\ y=2\\\\ z=3 \\end{aligned} Jadi penyelesaian dari sistem persamaan linear tersebut adalah \\begin{aligned} x=1, \\ y=2, \\ z=3 \\end{aligned}","title":"Metode Eliminasi Gauss-Jordan"},{"location":"SPAL/#metode_iterasi_seidel","text":"Metode interasi Gauss-Seidel adalah metode yang menggunakan proses iterasi hingga diperoleh nilai-nilai yang berubah-ubah. Metode iterasi Gauss-Seidel dikembangkan dari gagasan metode iterasi pada solusi persamaan tak linier. rumus dan metode gass seidel: x_{i}^{\\left( k\\right) }=\\dfrac{1}{a_{ij}}\\left( b_{i}-\\sum _{j=1}a_{ij}x_{j}^{\\left( k\\right) }-\\sum _{j=i+1}a_{ij}x_{j}^{\\left( k-1\\right) }\\right),i=1,2,...,n contoh: \\begin{aligned} 10x_{1}-x_{2}-2x_{3}=6\\\\ -x_{1}+x11_{2}-x_{3}+3x_{4}=25\\\\ 2x_{1}-x11_{2}+10x_{3}-x_{4}=-11\\\\ 3x_{2}-x11_{3}+8x_{4}=15 \\end{aligned} jawab: Menuliskan bentuk augmented Matriks A = \\begin{bmatrix} 10 & -1 & 2 & 0\\\\ -1 & 11 & -1 & 3\\\\ 2 & -1 & 10 & -1\\\\ 0 & 3 & -1 & 8 \\end{bmatrix} B = \\begin{bmatrix} 6\\\\ 25\\\\ -11\\\\ 15 \\end{bmatrix} Nilai pendekatan awal (0,0,0,0) g g Metode Iterasi Jacobi Metode Jacobi merupakan salah satu metode penyelesaian sistem persamaan linear (baca: matriks) berdimensi banyak (baca: lebih dari 2). Untuk matriks dengan dimensi kecil (kurang atau sama dengan dua), lebih efektif diselesaikan dengan aturan eliminasi atau metode Cramer. contoh: g g g","title":"Metode Iterasi Seidel"},{"location":"al/","text":"Sistem Persamaan Aljabar Linear \u00b6 a_{1}x_{1}+a_{2}x_{2}+...+a_{n}x_{n}= dari contoh persamaa diatas dimana: a1, a2,\u2026, an, dan b adalah konstanta dan x1, x2,\u2026, xn adalah variabel yang tidak diketahui. Pengertian \u00b6 System persamaan linear adalah himpunan beberapa persamaan linear dalam variabel x1, x2,\u2026, xn. Barisan bilangan s1, s2,\u2026 sn adalah solusi system persamaan linear apabila x1= s1 , x2= s2 \u2026 xn =sn memenuhi setiap persamaan linear dalam system. Ada tiga kemungkin dalam penyelesaian SPL yaitu mempunyai hanya 1 penyelesaian, mempunyai banyak penyelesaian, atau bahkan tidak mempunyai penyelesaian: hanya mempunyai 1 penyelesaian seperti : x1=2, and x2=1 \\begin{aligned}x_{1}+x_{2}=3\\\\ x_{1}-x_{2}=1\\end{aligned} mempunyai banyak penyelesaian seperti : = x1=1, x2=2, and x3=-1 \\begin{aligned}4x_{1}-x_{2}+3x_{3}=-1\\\\ 3x_{1}+x_{2}+9x_{3}=-4\\end{aligned} tidak mempunyai penyelesaian \\begin{aligned}x_{1}+x_{2}=4\\\\ x_{1}+x_{2}=3\\end{aligned} untuk penyelesaian tersebut dapat menggunakan System persamaan Linear dalam Augmented Matriks, yang nantinya akan banyak metode dalam menggunakannya. \\begin{bmatrix} a_{11} & a_{12} & \\ldots & a,n & b, \\\\ a_{21} & a_{12} & \\ldots & a_{2n} & b_{2} \\\\ \\vdots & \\vdots & & \\vdots & \\vdots \\\\ a_{m_{1}} & a_{m_{2}} & \\ldots & a_{mn} & b_{m} \\end{bmatrix} contoh: \\begin{aligned}x_{1}+5x_{2}-2x_{3}=3\\\\ 2x_{1}+4x_{2}-3x_{3}=1\\\\ -2x_{1}+6x_{2}-5x_{3}=2 \\end{aligned} Augmented matriksnya \\begin{bmatrix} 1 & 5 & -2 & 3 \\\\ 2 & 4 & -3 & 1 \\\\ -2 & 6 & -5 & 2 \\end{bmatrix} Metode untuk menyelesaikan SPL adalah dengan mengubah system yang ada menjadi system yang lebih sederhana. Secara umum langkah langkahnya diberikan di bawah ini. Mengalikan satu atau lebih dari persamaan yang ada dengan suatu pengali Mempertukarkan letak persamaan Menambah suatu persamaan dengan persamaan yang lain Mencari penyelesaian sistem persamaan linier \u00b6 untuk mencari penyelesain Sistem Persamaan Linier metodenya terdapat 2 macam, yaitu : Metode Eliminasi : gauss dan gauss jordan Metode Iterasi : seidel dan jacobi Metode Elminiasi Gauss \u00b6 Konsepnya didasarkan pada gagasan mereduksi matriks yang diperbanyak menjadi bentuk yang cukup sederhana sehingga sistem persamaan tersebut bisa diselesaikan dalam bentuk substitusi. contoh : \\begin{aligned} 2x+3y+z=5\\\\ 4x+4y-3z=3\\\\ 2x-3y+z=-1 \\end{aligned} Menuliskan bentuk augmented Matriks \\begin{bmatrix} 2 & 3 & -1 & 5 \\\\ 4 & 4 & -3 & 3 \\\\ 2 & -3 & 1 & -1 \\end{bmatrix} Hilangkan kolom pertama di bawah diagonal. Gantikan baris 2 dengan baris 2-2xbaris 1 \\begin{bmatrix} 2 & 3 & -1 & 5 \\\\ 0 & -2 & -1 & -7 \\\\ 2 & -3 & 1 & -1 \\end{bmatrix} ganti baris 3 dengan baris 3-baris 1 \\begin{bmatrix} 2 & 3 & -1 & 5 \\\\ 0 & -2 & -1 & -7 \\\\ 0 & -6 & 2 & -6 \\end{bmatrix} Hilangkan kolom kedua dbawah diagonal. Gantikan baris 3 dengan baris 3-3xbaris2 \\begin{bmatrix} 2 & 3 & -1 & 5 \\\\ 0 & -2 & -1 & -7 \\\\ 0 & 0 & 5 & 15 \\end{bmatrix} gunakan substitusi untuk mendapatkan penyelesaian \\begin{aligned} baris/row3\\rightarrow 5z=15\\rightarrow z=3\\\\ baris/row2\\rightarrow -2y-z=-7\\rightarrow y=2\\\\ baris/row1\\rightarrow 2y-3y+z=5\\rightarrow x=1 \\end{aligned} Berikut perhitungan menggunakan python dengan tambahan modul numpy : import numpy as np a = [[ 2 , 1 , - 1 , 8 ], [ - 3 , - 1 , 2 , - 11 ], [ - 2 , 1 , 2 , - 3 ]] n = len ( a [ 0 ]) - 1 x = np . zeros ( len ( a [ 0 ])) for i in range ( n ): if a [ i ][ i ] == 0.0 : sys . exit ( 'tidak boleh dibagi 0' ) for j in range ( i + 1 , n ): ratio = a [ j ][ i ] / a [ i ][ i ] for k in range ( n + 1 ): a [ j ][ k ] = a [ j ][ k ] - ratio * a [ i ][ k ] x [ n - 1 ] = a [ n - 1 ][ n ] / a [ n - 1 ][ n - 1 ] for i in range ( n - 2 , - 1 , - 1 ): x [ i ] = a [ i ][ n ] for j in range ( i + 1 , n ): x [ i ] = x [ i ] - a [ i ][ j ] * x [ j ] x [ i ] = x [ i ] / a [ i ][ i ] print ( \"hasilnya : \" ) print ( f \"x = { x [ 0 ] } \\n y = { x [ 1 ] } \\n z = { x [ 2 ] } \" ) hasilnya : x = 2.0 y = 3.0 z = - 1.0 Metode Eliminasi Gauss Jordan \u00b6 Eliminasi Gauss-Jordan adalah pengembangan dari eliminasi Gauss yang hasilnya lebih sederhana lagi. Caranya adalah dengan meneruskan operasi baris dari eliminasi Gauss sehingga menghasilkan matriks yang Eselon-baris. Ini juga dapat digunakan sebagai salah satu metode penyelesaian persamaan linear dengan menggunakan matriks. Metode eliminasi Gaus/Gaus-Jordan dilakukan dengan menggunakan langkah-langkah pada Operasi Baris Elementer (OBE). Sebelum melakukan OBE, bentuk umum dari sistem persamaan linear dirubah menjadi matriks yang diperbesar. contoh : \\begin{aligned} 2x+4y-3z=1\\\\ 3x+6y-5z=0\\\\ x+y+2z=9 \\end{aligned} jawab : Menuliskan bentuk augmented Matriks \\begin{bmatrix} 2 & 4 & -3 & 1 \\\\ 3 & 6 & -5 & 0 \\\\ 1 & 1 & 2 & 9 \\end{bmatrix} tukarkan baris ke 1 dengan baris ke 3 \\begin{bmatrix} 1 & 1 & 2 & 9\\\\ 3 & 6 & -5 & 0 \\\\ 2 & 4 & -3 & 1 \\end{bmatrix} kalikan (-3) pada baris 1 kemudian jumlahkan ke baris 2 \\begin{bmatrix} 1 & 1 & 2 & 9 \\\\ 0 & 3 & -11 & -27 \\\\ 2 & 4 & -3 & 1 \\end{bmatrix} kalikan (-2) pada baris 1 kemudian jumlahkan ke baris 3 \\begin{bmatrix} 1 & 1 & 2 & 9 \\\\ 0 & 3 & -11 & -27 \\\\ 0 & 2 & -7 & -17 \\end{bmatrix} kalikan 1/3 pada baris 2 \\begin{bmatrix} 1 & 1 & 2 & 9 \\\\ 0 & 1 & -11/3 & -9 \\\\ 0 & 2 & -7 & -17 \\end{bmatrix} kalikan (-2) pada baris 2 kemudian jumlahkan ke baris 3 \\begin{bmatrix} 1 & 1 & 2 & 9 \\\\ 0 & 1 & -11/3 & -9 \\\\ 0 & 0 & 1/3 & 1 \\end{bmatrix} kalikan 3 pada baris 3 \\begin{bmatrix} 1 & 1 & 2 & 9 \\\\ 0 & 1 & -11/3 & -9 \\\\ 0 & 0 & 1 & 3 \\end{bmatrix} kalikan 11/3 pada baris 3 kemudian jumlahkan baris 3 \\begin{bmatrix} 1 & 1 & 2 & 9 \\\\ 0 & 1 & 0 & 2 \\\\ 0 & 0 & 1 & 3 \\end{bmatrix} kalikan (-2) pada baris 3 kemudian jumlahkan ke baris 1 \\begin{bmatrix} 1 & 1 & 0 & 3 \\\\ 0 & 1 & 0 & 2 \\\\ 0 & 0 & 1 & 3 \\end{bmatrix} kalikan (-1) pada baris 2 kemudian jumlahkan ke baris 1 \\begin{bmatrix} 1 & 0 & 0 & 1 \\\\ 0 & 1 & 0 & 2 \\\\ 0 & 0 & 1 & 3 \\end{bmatrix} Hasil dari operasi baris tersebut kemudian dirubah kembali menjadi bentuk umum sistem persamaan linear. \\begin{aligned} x+0y+0z=1\\\\ 0x+y+0z=2\\\\ 0x+0y+z=3 \\end{aligned} Sistem persamaan linear yang diperoleh dapat ditulis sebagai berikut. \\begin{aligned} x=1\\\\ y=2\\\\ z=3 \\end{aligned} Jadi penyelesaian dari sistem persamaan linear tersebut adalah \\begin{aligned} x=1, \\ y=2, \\ z=3 \\end{aligned} Contoh : \\begin{aligned} 2x+y-z=8\\\\ -3x-y+2z=-11\\\\ -2x+y+2z=-3 \\end{aligned} a = [[ 2 , 1 , - 1 , 8 ], [ - 3 , - 1 , 2 , - 11 ], [ - 2 , 1 , 2 , - 3 ]] n = len ( a [ 0 ]) - 1 x = np . zeros ( len ( a [ 0 ]) - 1 ) for i in range ( n ): if a [ i ][ i ] == 0.0 : sys . exit ( 'Divide by zero detected!' ) for j in range ( n ): if i != j : ratio = a [ j ][ i ] / a [ i ][ i ] for k in range ( n + 1 ): a [ j ][ k ] = a [ j ][ k ] - ratio * a [ i ][ k ] for i in range ( n ): x [ i ] = a [ i ][ n ] / a [ i ][ i ] print ( \"hasilnya : \" ) print ( f \"x = { x [ 0 ] } \\n y = { x [ 1 ] } \\n z = { x [ 2 ] } \" ) hasilnya : x = 2.0 y = 3.0 z = - 1.0 Metode Iterasi Seidel \u00b6 Metode interasi Gauss-Seidel adalah metode yang menggunakan proses iterasi hingga diperoleh nilai-nilai yang berubah-ubah. Metode iterasi Gauss-Seidel dikembangkan dari gagasan metode iterasi pada solusi persamaan tak linier. rumus dan metode gauss seidel: x_{i}^{\\left( k\\right) }=\\dfrac{1}{a_{ij}}\\left( b_{i}-\\sum _{j=1}a_{ij}x_{j}^{\\left( k\\right) }-\\sum _{j=i+1}a_{ij}x_{j}^{\\left( k-1\\right) }\\right),i=1,2,...,n contoh : \\begin{aligned} 10x_{1}-x_{2}-2x_{3}=6\\\\ -x_{1}+x11_{2}-x_{3}+3x_{4}=25\\\\ 2x_{1}-x11_{2}+10x_{3}-x_{4}=-11\\\\ 3x_{2}-x11_{3}+8x_{4}=15 \\end{aligned} jawab : #fungsi f1 = lambda x , y , z : ( 7 + 1 - 1 ) / 4 f2 = lambda x , y , z : ( 21 + 4 * x + z ) / 8 f3 = lambda x , y , z : ( 14 - 2 * x - y ) / 5 x0 = 0 y0 = 0 z0 = 0 count = 1 e = float ( input ( 'toleransi error: ' )) condition = True while condition : x1 = f1 ( x0 , y0 , z0 ) y1 = f2 ( x1 , y0 , z0 ) z1 = f3 ( x1 , y1 , z0 ) print ( f \"iterasi- { count } : x = { x1 } | y = { y1 } | z = { z1 } \" ) e1 = abs ( x0 - x1 ); e2 = abs ( y0 - y1 ); e3 = abs ( z0 - z1 ); count += 1 x0 = x1 y0 = y1 z0 = z1 condition = e1 > e and e2 > e and e3 > e print ( \" \\n hasilnya : \" ) print ( f \"x = { x1 } \\n y = { y1 } \\n z = { z1 } \" ) toleransi error: 0.0001 iterasi-1 : x = 0.85 y = -1.0275 z = 1.010875 iterasi-2 : x = 1.0024625 y = -0.999825625 z = 0.99977990625 iterasi-3 : x = 0.999969271875 y = -1.00000639546875 z = 1.0000021134921877 iterasi-4 : x = 1.0000005311226563 y = -0.9999999739937891 z = 0.999999950788666 hasilnya : x = 1.0000005311226563 y = -0.9999999739937891 z = 0.999999950788666 Metode Iterasi jacobi \u00b6 Metode Jacobi merupakan salah satu metode yang mana untuk mengkalkulasikan tiap element didalamnya tetap mengambil acuan pada base element itu sendiri yang diinisialisasikan pertama kali, tidak seperti seidel yang pengkalkulasian tiap elementnya berdasarkan pada element sebelumnya yang telah selesai, satu persatu. contoh : \\begin{aligned} 4x-y+z=7\\\\ 4x-8y+z=-21\\\\ -2x+y+5z=15 \\end{aligned} jawab: f1 = lambda x , y , z : ( 7 + 1 - 1 ) / 4 f2 = lambda x , y , z : ( 21 + 4 * x + z ) / 8 f3 = lambda x , y , z : ( 14 - 2 * x - y ) / 5 x0 = 0 y0 = 0 z0 = 0 count = 1 e = float ( input ( 'toleransi error: ' )) condition = True while condition : x1 = f1 ( x0 , y0 , z0 ) y1 = f2 ( x0 , y0 , z0 ) z1 = f3 ( x0 , y0 , z0 ) print ( f \"iterasi- { count } : x = { x1 } \\n\\t y = { y1 } \\n\\t z = { z1 } \" ) e1 = abs ( x0 - x1 ); e2 = abs ( y0 - y1 ); e3 = abs ( z0 - z1 ); count += 1 x0 = x1 y0 = y1 z0 = z1 condition = e1 > e and e2 > e and e3 > e print ( \" \\n hasilnya : \" ) print ( f \"x = { x1 } \\n y = { y1 } \\n z = { z1 } \" ) toleransi error: 0.001 iterasi-1 : x = 1.75 y = 2.625 z = 2.8 iterasi-2 : x = 1.75 y = 3.85 z = 1.575 hasilnya : x = 1.75 y = 3.85 z = 1.575 s","title":"Numerical Solution of System Linier Algebraic Solution"},{"location":"al/#sistem_persamaan_aljabar_linear","text":"a_{1}x_{1}+a_{2}x_{2}+...+a_{n}x_{n}= dari contoh persamaa diatas dimana: a1, a2,\u2026, an, dan b adalah konstanta dan x1, x2,\u2026, xn adalah variabel yang tidak diketahui.","title":"Sistem Persamaan Aljabar Linear"},{"location":"al/#pengertian","text":"System persamaan linear adalah himpunan beberapa persamaan linear dalam variabel x1, x2,\u2026, xn. Barisan bilangan s1, s2,\u2026 sn adalah solusi system persamaan linear apabila x1= s1 , x2= s2 \u2026 xn =sn memenuhi setiap persamaan linear dalam system. Ada tiga kemungkin dalam penyelesaian SPL yaitu mempunyai hanya 1 penyelesaian, mempunyai banyak penyelesaian, atau bahkan tidak mempunyai penyelesaian: hanya mempunyai 1 penyelesaian seperti : x1=2, and x2=1 \\begin{aligned}x_{1}+x_{2}=3\\\\ x_{1}-x_{2}=1\\end{aligned} mempunyai banyak penyelesaian seperti : = x1=1, x2=2, and x3=-1 \\begin{aligned}4x_{1}-x_{2}+3x_{3}=-1\\\\ 3x_{1}+x_{2}+9x_{3}=-4\\end{aligned} tidak mempunyai penyelesaian \\begin{aligned}x_{1}+x_{2}=4\\\\ x_{1}+x_{2}=3\\end{aligned} untuk penyelesaian tersebut dapat menggunakan System persamaan Linear dalam Augmented Matriks, yang nantinya akan banyak metode dalam menggunakannya. \\begin{bmatrix} a_{11} & a_{12} & \\ldots & a,n & b, \\\\ a_{21} & a_{12} & \\ldots & a_{2n} & b_{2} \\\\ \\vdots & \\vdots & & \\vdots & \\vdots \\\\ a_{m_{1}} & a_{m_{2}} & \\ldots & a_{mn} & b_{m} \\end{bmatrix} contoh: \\begin{aligned}x_{1}+5x_{2}-2x_{3}=3\\\\ 2x_{1}+4x_{2}-3x_{3}=1\\\\ -2x_{1}+6x_{2}-5x_{3}=2 \\end{aligned} Augmented matriksnya \\begin{bmatrix} 1 & 5 & -2 & 3 \\\\ 2 & 4 & -3 & 1 \\\\ -2 & 6 & -5 & 2 \\end{bmatrix} Metode untuk menyelesaikan SPL adalah dengan mengubah system yang ada menjadi system yang lebih sederhana. Secara umum langkah langkahnya diberikan di bawah ini. Mengalikan satu atau lebih dari persamaan yang ada dengan suatu pengali Mempertukarkan letak persamaan Menambah suatu persamaan dengan persamaan yang lain","title":"Pengertian"},{"location":"al/#mencari_penyelesaian_sistem_persamaan_linier","text":"untuk mencari penyelesain Sistem Persamaan Linier metodenya terdapat 2 macam, yaitu : Metode Eliminasi : gauss dan gauss jordan Metode Iterasi : seidel dan jacobi","title":"Mencari penyelesaian sistem persamaan linier"},{"location":"al/#metode_elminiasi_gauss","text":"Konsepnya didasarkan pada gagasan mereduksi matriks yang diperbanyak menjadi bentuk yang cukup sederhana sehingga sistem persamaan tersebut bisa diselesaikan dalam bentuk substitusi. contoh : \\begin{aligned} 2x+3y+z=5\\\\ 4x+4y-3z=3\\\\ 2x-3y+z=-1 \\end{aligned} Menuliskan bentuk augmented Matriks \\begin{bmatrix} 2 & 3 & -1 & 5 \\\\ 4 & 4 & -3 & 3 \\\\ 2 & -3 & 1 & -1 \\end{bmatrix} Hilangkan kolom pertama di bawah diagonal. Gantikan baris 2 dengan baris 2-2xbaris 1 \\begin{bmatrix} 2 & 3 & -1 & 5 \\\\ 0 & -2 & -1 & -7 \\\\ 2 & -3 & 1 & -1 \\end{bmatrix} ganti baris 3 dengan baris 3-baris 1 \\begin{bmatrix} 2 & 3 & -1 & 5 \\\\ 0 & -2 & -1 & -7 \\\\ 0 & -6 & 2 & -6 \\end{bmatrix} Hilangkan kolom kedua dbawah diagonal. Gantikan baris 3 dengan baris 3-3xbaris2 \\begin{bmatrix} 2 & 3 & -1 & 5 \\\\ 0 & -2 & -1 & -7 \\\\ 0 & 0 & 5 & 15 \\end{bmatrix} gunakan substitusi untuk mendapatkan penyelesaian \\begin{aligned} baris/row3\\rightarrow 5z=15\\rightarrow z=3\\\\ baris/row2\\rightarrow -2y-z=-7\\rightarrow y=2\\\\ baris/row1\\rightarrow 2y-3y+z=5\\rightarrow x=1 \\end{aligned} Berikut perhitungan menggunakan python dengan tambahan modul numpy : import numpy as np a = [[ 2 , 1 , - 1 , 8 ], [ - 3 , - 1 , 2 , - 11 ], [ - 2 , 1 , 2 , - 3 ]] n = len ( a [ 0 ]) - 1 x = np . zeros ( len ( a [ 0 ])) for i in range ( n ): if a [ i ][ i ] == 0.0 : sys . exit ( 'tidak boleh dibagi 0' ) for j in range ( i + 1 , n ): ratio = a [ j ][ i ] / a [ i ][ i ] for k in range ( n + 1 ): a [ j ][ k ] = a [ j ][ k ] - ratio * a [ i ][ k ] x [ n - 1 ] = a [ n - 1 ][ n ] / a [ n - 1 ][ n - 1 ] for i in range ( n - 2 , - 1 , - 1 ): x [ i ] = a [ i ][ n ] for j in range ( i + 1 , n ): x [ i ] = x [ i ] - a [ i ][ j ] * x [ j ] x [ i ] = x [ i ] / a [ i ][ i ] print ( \"hasilnya : \" ) print ( f \"x = { x [ 0 ] } \\n y = { x [ 1 ] } \\n z = { x [ 2 ] } \" ) hasilnya : x = 2.0 y = 3.0 z = - 1.0","title":"Metode Elminiasi Gauss"},{"location":"al/#metode_eliminasi_gauss_jordan","text":"Eliminasi Gauss-Jordan adalah pengembangan dari eliminasi Gauss yang hasilnya lebih sederhana lagi. Caranya adalah dengan meneruskan operasi baris dari eliminasi Gauss sehingga menghasilkan matriks yang Eselon-baris. Ini juga dapat digunakan sebagai salah satu metode penyelesaian persamaan linear dengan menggunakan matriks. Metode eliminasi Gaus/Gaus-Jordan dilakukan dengan menggunakan langkah-langkah pada Operasi Baris Elementer (OBE). Sebelum melakukan OBE, bentuk umum dari sistem persamaan linear dirubah menjadi matriks yang diperbesar. contoh : \\begin{aligned} 2x+4y-3z=1\\\\ 3x+6y-5z=0\\\\ x+y+2z=9 \\end{aligned} jawab : Menuliskan bentuk augmented Matriks \\begin{bmatrix} 2 & 4 & -3 & 1 \\\\ 3 & 6 & -5 & 0 \\\\ 1 & 1 & 2 & 9 \\end{bmatrix} tukarkan baris ke 1 dengan baris ke 3 \\begin{bmatrix} 1 & 1 & 2 & 9\\\\ 3 & 6 & -5 & 0 \\\\ 2 & 4 & -3 & 1 \\end{bmatrix} kalikan (-3) pada baris 1 kemudian jumlahkan ke baris 2 \\begin{bmatrix} 1 & 1 & 2 & 9 \\\\ 0 & 3 & -11 & -27 \\\\ 2 & 4 & -3 & 1 \\end{bmatrix} kalikan (-2) pada baris 1 kemudian jumlahkan ke baris 3 \\begin{bmatrix} 1 & 1 & 2 & 9 \\\\ 0 & 3 & -11 & -27 \\\\ 0 & 2 & -7 & -17 \\end{bmatrix} kalikan 1/3 pada baris 2 \\begin{bmatrix} 1 & 1 & 2 & 9 \\\\ 0 & 1 & -11/3 & -9 \\\\ 0 & 2 & -7 & -17 \\end{bmatrix} kalikan (-2) pada baris 2 kemudian jumlahkan ke baris 3 \\begin{bmatrix} 1 & 1 & 2 & 9 \\\\ 0 & 1 & -11/3 & -9 \\\\ 0 & 0 & 1/3 & 1 \\end{bmatrix} kalikan 3 pada baris 3 \\begin{bmatrix} 1 & 1 & 2 & 9 \\\\ 0 & 1 & -11/3 & -9 \\\\ 0 & 0 & 1 & 3 \\end{bmatrix} kalikan 11/3 pada baris 3 kemudian jumlahkan baris 3 \\begin{bmatrix} 1 & 1 & 2 & 9 \\\\ 0 & 1 & 0 & 2 \\\\ 0 & 0 & 1 & 3 \\end{bmatrix} kalikan (-2) pada baris 3 kemudian jumlahkan ke baris 1 \\begin{bmatrix} 1 & 1 & 0 & 3 \\\\ 0 & 1 & 0 & 2 \\\\ 0 & 0 & 1 & 3 \\end{bmatrix} kalikan (-1) pada baris 2 kemudian jumlahkan ke baris 1 \\begin{bmatrix} 1 & 0 & 0 & 1 \\\\ 0 & 1 & 0 & 2 \\\\ 0 & 0 & 1 & 3 \\end{bmatrix} Hasil dari operasi baris tersebut kemudian dirubah kembali menjadi bentuk umum sistem persamaan linear. \\begin{aligned} x+0y+0z=1\\\\ 0x+y+0z=2\\\\ 0x+0y+z=3 \\end{aligned} Sistem persamaan linear yang diperoleh dapat ditulis sebagai berikut. \\begin{aligned} x=1\\\\ y=2\\\\ z=3 \\end{aligned} Jadi penyelesaian dari sistem persamaan linear tersebut adalah \\begin{aligned} x=1, \\ y=2, \\ z=3 \\end{aligned} Contoh : \\begin{aligned} 2x+y-z=8\\\\ -3x-y+2z=-11\\\\ -2x+y+2z=-3 \\end{aligned} a = [[ 2 , 1 , - 1 , 8 ], [ - 3 , - 1 , 2 , - 11 ], [ - 2 , 1 , 2 , - 3 ]] n = len ( a [ 0 ]) - 1 x = np . zeros ( len ( a [ 0 ]) - 1 ) for i in range ( n ): if a [ i ][ i ] == 0.0 : sys . exit ( 'Divide by zero detected!' ) for j in range ( n ): if i != j : ratio = a [ j ][ i ] / a [ i ][ i ] for k in range ( n + 1 ): a [ j ][ k ] = a [ j ][ k ] - ratio * a [ i ][ k ] for i in range ( n ): x [ i ] = a [ i ][ n ] / a [ i ][ i ] print ( \"hasilnya : \" ) print ( f \"x = { x [ 0 ] } \\n y = { x [ 1 ] } \\n z = { x [ 2 ] } \" ) hasilnya : x = 2.0 y = 3.0 z = - 1.0","title":"Metode Eliminasi Gauss Jordan"},{"location":"al/#metode_iterasi_seidel","text":"Metode interasi Gauss-Seidel adalah metode yang menggunakan proses iterasi hingga diperoleh nilai-nilai yang berubah-ubah. Metode iterasi Gauss-Seidel dikembangkan dari gagasan metode iterasi pada solusi persamaan tak linier. rumus dan metode gauss seidel: x_{i}^{\\left( k\\right) }=\\dfrac{1}{a_{ij}}\\left( b_{i}-\\sum _{j=1}a_{ij}x_{j}^{\\left( k\\right) }-\\sum _{j=i+1}a_{ij}x_{j}^{\\left( k-1\\right) }\\right),i=1,2,...,n contoh : \\begin{aligned} 10x_{1}-x_{2}-2x_{3}=6\\\\ -x_{1}+x11_{2}-x_{3}+3x_{4}=25\\\\ 2x_{1}-x11_{2}+10x_{3}-x_{4}=-11\\\\ 3x_{2}-x11_{3}+8x_{4}=15 \\end{aligned} jawab : #fungsi f1 = lambda x , y , z : ( 7 + 1 - 1 ) / 4 f2 = lambda x , y , z : ( 21 + 4 * x + z ) / 8 f3 = lambda x , y , z : ( 14 - 2 * x - y ) / 5 x0 = 0 y0 = 0 z0 = 0 count = 1 e = float ( input ( 'toleransi error: ' )) condition = True while condition : x1 = f1 ( x0 , y0 , z0 ) y1 = f2 ( x1 , y0 , z0 ) z1 = f3 ( x1 , y1 , z0 ) print ( f \"iterasi- { count } : x = { x1 } | y = { y1 } | z = { z1 } \" ) e1 = abs ( x0 - x1 ); e2 = abs ( y0 - y1 ); e3 = abs ( z0 - z1 ); count += 1 x0 = x1 y0 = y1 z0 = z1 condition = e1 > e and e2 > e and e3 > e print ( \" \\n hasilnya : \" ) print ( f \"x = { x1 } \\n y = { y1 } \\n z = { z1 } \" ) toleransi error: 0.0001 iterasi-1 : x = 0.85 y = -1.0275 z = 1.010875 iterasi-2 : x = 1.0024625 y = -0.999825625 z = 0.99977990625 iterasi-3 : x = 0.999969271875 y = -1.00000639546875 z = 1.0000021134921877 iterasi-4 : x = 1.0000005311226563 y = -0.9999999739937891 z = 0.999999950788666 hasilnya : x = 1.0000005311226563 y = -0.9999999739937891 z = 0.999999950788666","title":"Metode Iterasi Seidel"},{"location":"al/#metode_iterasi_jacobi","text":"Metode Jacobi merupakan salah satu metode yang mana untuk mengkalkulasikan tiap element didalamnya tetap mengambil acuan pada base element itu sendiri yang diinisialisasikan pertama kali, tidak seperti seidel yang pengkalkulasian tiap elementnya berdasarkan pada element sebelumnya yang telah selesai, satu persatu. contoh : \\begin{aligned} 4x-y+z=7\\\\ 4x-8y+z=-21\\\\ -2x+y+5z=15 \\end{aligned} jawab: f1 = lambda x , y , z : ( 7 + 1 - 1 ) / 4 f2 = lambda x , y , z : ( 21 + 4 * x + z ) / 8 f3 = lambda x , y , z : ( 14 - 2 * x - y ) / 5 x0 = 0 y0 = 0 z0 = 0 count = 1 e = float ( input ( 'toleransi error: ' )) condition = True while condition : x1 = f1 ( x0 , y0 , z0 ) y1 = f2 ( x0 , y0 , z0 ) z1 = f3 ( x0 , y0 , z0 ) print ( f \"iterasi- { count } : x = { x1 } \\n\\t y = { y1 } \\n\\t z = { z1 } \" ) e1 = abs ( x0 - x1 ); e2 = abs ( y0 - y1 ); e3 = abs ( z0 - z1 ); count += 1 x0 = x1 y0 = y1 z0 = z1 condition = e1 > e and e2 > e and e3 > e print ( \" \\n hasilnya : \" ) print ( f \"x = { x1 } \\n y = { y1 } \\n z = { z1 } \" ) toleransi error: 0.001 iterasi-1 : x = 1.75 y = 2.625 z = 2.8 iterasi-2 : x = 1.75 y = 3.85 z = 1.575 hasilnya : x = 1.75 y = 3.85 z = 1.575 s","title":"Metode Iterasi jacobi"},{"location":"integrasi-numerik/","text":"Integrasi Numerik \u00b6 Disaat terdapat ungkapan-ungkapan integral matematis yang tidak mudah atau bahkan sulit diselesaikan secara analitis, dan terkadang juga fungsi yang di integralkan berupak titik-titik data maka disinilah integrasi numerik mengambil perannya dalam mengatasi kebuntuan saat melakukan proses secara analitis tersebut. terdapat 2 macam integral. integral tentu : limit dari jumlah maupun suatu luas daerah tertentu. \\int ^{b}_{a}f\\left( x\\right) dx=\\left[ F\\left( x\\right) \\right] _{a}^{b}=F\\left( b\\right) -F\\left( a\\right)] integral tak tentu : invers atau kebalikan dari turunan \\int xdx=\\dfrac{x^{3}}{2}+c Metode ini merupakan integral tertentu yang perhitungannya didasarkan pada hitungan perkiraan. metodenya yang paling sering digunakan seperti : Metode Trapesium (Trapezoidal rule) Metode Simpson Metode Quadratik Gauss A. Metode Trapesium \u00b6 metode ini didasarkan pada penjumlahan tiap model segmen yang berbentuk trapesium \\int ^{b}_{a}\\left( x\\right) dx=\\left[ \\left| b-a\\right| f\\left( a\\right) +f\\left( b\\right) \\right] +E ruas sebelah kanan adalah aturan trapesiumnya, dan ruas sebelah kiri yang yang di deklarasikan E adalah nilai error yang dimiliki oleh metode ini. contoh : \\int_0^{\\pi/2} \\sin x \\ dx = 1 def trapesium ( f , a , b , N = 50 ): x = np . linspace ( a , b , N + 1 ) y = f ( x ) y_right = y [ 1 :] # right endpoints y_left = y [: - 1 ] # left endpoints dx = ( b - a ) / N T = ( dx / 2 ) * np . sum ( y_right + y_left ) return T disini menggunakan tambahan modul numpy untuk memanggil fungsi logaritma sinus dengan nama sin import numpy as np result = trapesium ( np . sin , 0 , np . pi / 2 , 1000 ) print ( result ) 0.9999997943832332 python juga menyediakan modul untuk penggunaan metode Trapesium ini, modul tersebut adalah scipy.integrate.trapz yang terdapat pada modul utama scipy , untuk menggunakannya disana membutuhkan 2 parameter dengan bertype list . untuk contoh soal sama dengan diatas. import scipy.integrate as spi n = 1000 x = np.linspace(0, np.pi/2, n+1) y = np.sin(x) res = spi.trapz(y, x) 0.9999997943832332 B. Metode Simpson \u00b6 metode ini menggunakan menggunakan pembobot berat pada titik tengah dua buah trapesium, karena daerah pembaginya bukan sebuah trapesium lagi, karena ini merupakan pengembangan dari metode trapesium. Metode simpson dibagi menjadi beberapa aturan Aturan Simpson 1/3 \u00b6 aturan ini menggunakan polinomial order dua (persamaan parabola) yang melalui titik (xi1, f(xi1)), (xi,f(xi)) dan (xi,f(xi+1)) untuk mendekati fungsi yang sebenarnya. Rumus Simpson dapat diturunkan berdasarkan deret Taylor, sedemikian sehingga diperoleh luas daerah \ud835\udc34\ud835\udc56 adalah: A_{i}=\\dfrac{\\Delta x}{3}( f_{i}-1+4fi+fi+1) Aturan Simpson 3/8 \u00b6 aturan ini menggunakan persamaan polinomial order tiga yang melalui empat titik. I=\\int ^{b}_{a}f\\left( x\\right) dx=\\int ^{b}_{a}f_{3}\\left( x\\right) dx Dengan prinsip yang sama seperti pada aturan Simpson 1/3, diperoleh rumus untuk aturan Simpson 3/8 sebagai berikut: I = \\dfrac{3\\Delta x}{8}\\left[ f\\left( x_{0}\\right) +3f\\left( x_{1}\\right) +\\right] f\\left( +2\\right) +f\\left( x_{3}\\right) ] dengan: \\Delta x=\\dfrac{b-a}{3} Berikut contoh soal yang akan diselesaikan dengan menggunakan metode simpson : \\int_0^1 3x^2 dx import numpy as np def simpson ( f , a , b , N = 50 ): if N % 2 == 1 : print ( 'N harus bilangan genap' ) dx = ( b - a ) / N x = np . linspace ( a , b , N + 1 ) y = f ( x ) S = dx / 3 * np . sum ( y [ 0 : - 1 : 2 ] + 4 * y [ 1 :: 2 ] + y [ 2 :: 2 ]) return S simpson ( lambda x : 3 * x ** 2 , 0 , 1 , 10 ) 1.0 python juga menyediakan modul untuk penggunaan metode Simpson ini, modul tersebut adalah scipy.integrate.simps yang terdapat pada modul utama scipy , untuk menggunakannya disana membutuhkan 2 parameter dengan bertype list . untuk contoh soal sama dengan diatas. import scipy.integrate as spi n = 10 x = np . linspace ( 0 , 1 , n + 1 ) y = 3 * x ** 2 res = spi . simps ( y , x ) print ( res ) 1.0 C. Metode Quadratik Gauss \u00b6 metode ini melakukan perhitungan luas di bawah garis lurus yang menghubungkan dua titik sembarang pada kurva. Dengan menetapkan posisi dari kedua titik tersebut secara bebas, maka akan bisa ditentukan garis lurus yang dapat menyeimbangkan antara kesalahan positif dan negatif, sebagaimana dapat dilihat pada gambar di atas. Berikut adalah rumus metode quadratur Gauss untuk menghitung luas daerah di bawah kurva f(x) dan di atas sumbu x dengan batasan x = -1 sampai x = 1: 1=f\\left( -\\dfrac{1}{\\sqrt{3}}\\right) +f\\left( \\dfrac{1}{\\sqrt{3}}\\right) Jika batasan integrasi bukanlah x = -1 sampai x = 1, maka perlu dilakukan transformasi pada batas awal, sedemikian sehingga batasannya berubah menjadi [-1, 1], yang mengakibatkan perubahan pada rumus fungsi awal. Bentuk rumus Quadratur Gauss untuk dua titik dapat dikembangkan untuk lebih banyak titik. Secara umum, rumus untuk metode Quadratur Gauss dengan n titik mempunyai bentuk: 1=c_{1}f\\left( x\\cdot \\right) +c_{1}f\\left( x_{2}\\right) +\\ldots +c_{n}f\\left( x_{n}\\right) contoh: \u00b6 Hitunglah integral 1=\\int ^{4}_{0}e^{x}dx dengan menggunakan metode quadratur Gauss 2 titik! penyelesaian \u00b6 Lakukan transformasi untuk batasan integrasi: \\begin{aligned}x=\\dfrac{\\left( b+a\\right) +\\left( b-a\\right) x_{d}}{2}\\\\ x=\\dfrac{\\left( 4+0\\right) +\\left( \\left( 4-0\\right) x_{d}\\right) }{2}=2+2x_{d}\\end{aligned} turunan dari persamaan tersebut adalah: dx=2dx_{d} Kedua bentuk diatas disubstitusikan ke dalam fungsi awal, sehingga didapat: \\int ^{4}_{0}e^{x}dx=\\int ^{1}_{-1}e^{\\left( 2+2x_{d}\\right) }2dx_{d} Ruas kanan dari integran diatas dapat digunakan untuk menghitung luasan dengan metode Gauss Kuadratur, dengan memasukkan nilai x_{1}=-\\dfrac{1}{\\sqrt{3}}=\u20130,577350269 dan nilai x_2=0,577350269 untuk x_{1}=\u20130,577350269\\rightarrow 2e^{\\left[ 2+( 2\\times \\left( -0,577350269)\\right) \\right] }=4,6573501 untuk x_{1}=0,577350269\\rightarrow 2e^{\\left[ 2+( 2\\times \\left( 0,577350269)\\right) \\right] }=46,8920297 luas total diperoleh: I = 4,6573501 + 46,8920297 = 51,549380 dengan tingkat kesalahan: \\varepsilon _{t}=\\dfrac{53,598150-51,549380}{53,598150}\\times 100\\% =3,82\\%","title":"Integrasi Numerik"},{"location":"integrasi-numerik/#integrasi_numerik","text":"Disaat terdapat ungkapan-ungkapan integral matematis yang tidak mudah atau bahkan sulit diselesaikan secara analitis, dan terkadang juga fungsi yang di integralkan berupak titik-titik data maka disinilah integrasi numerik mengambil perannya dalam mengatasi kebuntuan saat melakukan proses secara analitis tersebut. terdapat 2 macam integral. integral tentu : limit dari jumlah maupun suatu luas daerah tertentu. \\int ^{b}_{a}f\\left( x\\right) dx=\\left[ F\\left( x\\right) \\right] _{a}^{b}=F\\left( b\\right) -F\\left( a\\right)] integral tak tentu : invers atau kebalikan dari turunan \\int xdx=\\dfrac{x^{3}}{2}+c Metode ini merupakan integral tertentu yang perhitungannya didasarkan pada hitungan perkiraan. metodenya yang paling sering digunakan seperti : Metode Trapesium (Trapezoidal rule) Metode Simpson Metode Quadratik Gauss","title":"Integrasi Numerik"},{"location":"integrasi-numerik/#a_metode_trapesium","text":"metode ini didasarkan pada penjumlahan tiap model segmen yang berbentuk trapesium \\int ^{b}_{a}\\left( x\\right) dx=\\left[ \\left| b-a\\right| f\\left( a\\right) +f\\left( b\\right) \\right] +E ruas sebelah kanan adalah aturan trapesiumnya, dan ruas sebelah kiri yang yang di deklarasikan E adalah nilai error yang dimiliki oleh metode ini. contoh : \\int_0^{\\pi/2} \\sin x \\ dx = 1 def trapesium ( f , a , b , N = 50 ): x = np . linspace ( a , b , N + 1 ) y = f ( x ) y_right = y [ 1 :] # right endpoints y_left = y [: - 1 ] # left endpoints dx = ( b - a ) / N T = ( dx / 2 ) * np . sum ( y_right + y_left ) return T disini menggunakan tambahan modul numpy untuk memanggil fungsi logaritma sinus dengan nama sin import numpy as np result = trapesium ( np . sin , 0 , np . pi / 2 , 1000 ) print ( result ) 0.9999997943832332 python juga menyediakan modul untuk penggunaan metode Trapesium ini, modul tersebut adalah scipy.integrate.trapz yang terdapat pada modul utama scipy , untuk menggunakannya disana membutuhkan 2 parameter dengan bertype list . untuk contoh soal sama dengan diatas. import scipy.integrate as spi n = 1000 x = np.linspace(0, np.pi/2, n+1) y = np.sin(x) res = spi.trapz(y, x) 0.9999997943832332","title":"A. Metode Trapesium"},{"location":"integrasi-numerik/#b_metode_simpson","text":"metode ini menggunakan menggunakan pembobot berat pada titik tengah dua buah trapesium, karena daerah pembaginya bukan sebuah trapesium lagi, karena ini merupakan pengembangan dari metode trapesium. Metode simpson dibagi menjadi beberapa aturan","title":"B. Metode Simpson"},{"location":"integrasi-numerik/#aturan_simpson_13","text":"aturan ini menggunakan polinomial order dua (persamaan parabola) yang melalui titik (xi1, f(xi1)), (xi,f(xi)) dan (xi,f(xi+1)) untuk mendekati fungsi yang sebenarnya. Rumus Simpson dapat diturunkan berdasarkan deret Taylor, sedemikian sehingga diperoleh luas daerah \ud835\udc34\ud835\udc56 adalah: A_{i}=\\dfrac{\\Delta x}{3}( f_{i}-1+4fi+fi+1)","title":"Aturan Simpson 1/3"},{"location":"integrasi-numerik/#aturan_simpson_38","text":"aturan ini menggunakan persamaan polinomial order tiga yang melalui empat titik. I=\\int ^{b}_{a}f\\left( x\\right) dx=\\int ^{b}_{a}f_{3}\\left( x\\right) dx Dengan prinsip yang sama seperti pada aturan Simpson 1/3, diperoleh rumus untuk aturan Simpson 3/8 sebagai berikut: I = \\dfrac{3\\Delta x}{8}\\left[ f\\left( x_{0}\\right) +3f\\left( x_{1}\\right) +\\right] f\\left( +2\\right) +f\\left( x_{3}\\right) ] dengan: \\Delta x=\\dfrac{b-a}{3} Berikut contoh soal yang akan diselesaikan dengan menggunakan metode simpson : \\int_0^1 3x^2 dx import numpy as np def simpson ( f , a , b , N = 50 ): if N % 2 == 1 : print ( 'N harus bilangan genap' ) dx = ( b - a ) / N x = np . linspace ( a , b , N + 1 ) y = f ( x ) S = dx / 3 * np . sum ( y [ 0 : - 1 : 2 ] + 4 * y [ 1 :: 2 ] + y [ 2 :: 2 ]) return S simpson ( lambda x : 3 * x ** 2 , 0 , 1 , 10 ) 1.0 python juga menyediakan modul untuk penggunaan metode Simpson ini, modul tersebut adalah scipy.integrate.simps yang terdapat pada modul utama scipy , untuk menggunakannya disana membutuhkan 2 parameter dengan bertype list . untuk contoh soal sama dengan diatas. import scipy.integrate as spi n = 10 x = np . linspace ( 0 , 1 , n + 1 ) y = 3 * x ** 2 res = spi . simps ( y , x ) print ( res ) 1.0","title":"Aturan Simpson 3/8"},{"location":"integrasi-numerik/#c_metode_quadratik_gauss","text":"metode ini melakukan perhitungan luas di bawah garis lurus yang menghubungkan dua titik sembarang pada kurva. Dengan menetapkan posisi dari kedua titik tersebut secara bebas, maka akan bisa ditentukan garis lurus yang dapat menyeimbangkan antara kesalahan positif dan negatif, sebagaimana dapat dilihat pada gambar di atas. Berikut adalah rumus metode quadratur Gauss untuk menghitung luas daerah di bawah kurva f(x) dan di atas sumbu x dengan batasan x = -1 sampai x = 1: 1=f\\left( -\\dfrac{1}{\\sqrt{3}}\\right) +f\\left( \\dfrac{1}{\\sqrt{3}}\\right) Jika batasan integrasi bukanlah x = -1 sampai x = 1, maka perlu dilakukan transformasi pada batas awal, sedemikian sehingga batasannya berubah menjadi [-1, 1], yang mengakibatkan perubahan pada rumus fungsi awal. Bentuk rumus Quadratur Gauss untuk dua titik dapat dikembangkan untuk lebih banyak titik. Secara umum, rumus untuk metode Quadratur Gauss dengan n titik mempunyai bentuk: 1=c_{1}f\\left( x\\cdot \\right) +c_{1}f\\left( x_{2}\\right) +\\ldots +c_{n}f\\left( x_{n}\\right)","title":"C. Metode Quadratik Gauss"},{"location":"integrasi-numerik/#contoh","text":"Hitunglah integral 1=\\int ^{4}_{0}e^{x}dx dengan menggunakan metode quadratur Gauss 2 titik!","title":"contoh:"},{"location":"integrasi-numerik/#penyelesaian","text":"Lakukan transformasi untuk batasan integrasi: \\begin{aligned}x=\\dfrac{\\left( b+a\\right) +\\left( b-a\\right) x_{d}}{2}\\\\ x=\\dfrac{\\left( 4+0\\right) +\\left( \\left( 4-0\\right) x_{d}\\right) }{2}=2+2x_{d}\\end{aligned} turunan dari persamaan tersebut adalah: dx=2dx_{d} Kedua bentuk diatas disubstitusikan ke dalam fungsi awal, sehingga didapat: \\int ^{4}_{0}e^{x}dx=\\int ^{1}_{-1}e^{\\left( 2+2x_{d}\\right) }2dx_{d} Ruas kanan dari integran diatas dapat digunakan untuk menghitung luasan dengan metode Gauss Kuadratur, dengan memasukkan nilai x_{1}=-\\dfrac{1}{\\sqrt{3}}=\u20130,577350269 dan nilai x_2=0,577350269 untuk x_{1}=\u20130,577350269\\rightarrow 2e^{\\left[ 2+( 2\\times \\left( -0,577350269)\\right) \\right] }=4,6573501 untuk x_{1}=0,577350269\\rightarrow 2e^{\\left[ 2+( 2\\times \\left( 0,577350269)\\right) \\right] }=46,8920297 luas total diperoleh: I = 4,6573501 + 46,8920297 = 51,549380 dengan tingkat kesalahan: \\varepsilon _{t}=\\dfrac{53,598150-51,549380}{53,598150}\\times 100\\% =3,82\\%","title":"penyelesaian"},{"location":"persamaan-differensial/","text":"Persamaan Differensial Biasa (Ordinary Differential Equations (ODE)) \u00b6 A. Persamaan Differensial Biasa \u00b6 Persamaan Differensial adalah Persamaan yang mengandung beberapa turunan dari suatu fungsi yang tidak diketahui. Sedangkan Persamaan Differensial Biasa adalah Persamaan yang mempunyai fungsi satu variable bebas. \\dfrac{dy}{dx}+y=x^{2} xy\\left( \\dfrac{d^{3}y}{dx^{3}}\\right) ^{2}+\\sin \\left( \\dfrac{d^{2}y}{dx^{2}}\\right) +8x^{2}y\\left( \\dfrac{dx}{dy}\\right) +x^{2}=0 Persamaan Differensial Biasa (Ordinary Differential Equations (ODE)) digunakan untuk mendapatkan formulasi suatu fenomena yang mengalami perubahan terhadap waktu atau tempat orde turunan tertinggi dari fungsi yang terlibat dalam persamaan diferensial. orde 2: \\dfrac{d^{2}y}{dt^{2}} orde 3: \\dfrac{d^{3}x}{dt^{3}} derajat pangkat dari turunan tertinggi fungsi yang terlibat dalam persamaan. derajat 2: xy\\left( \\dfrac{d^{3}y}{dx^{3}}\\right) ^{2} contoh persamaan berikut adalah persamaan diferensial biasa (PDB): i).\\dfrac{dy}{dx}=x+y ii).y^{'}=x^{2}+y^{2} iii).2\\dfrac{dy}{dx}+x^{2}y-y=0 iv).y^{''}+y^{'}\\cos x-3y=\\sin 2\\times v).2y^{'''}-23y^{'}=1-y^{''} Peubah bebas untuk contoh (i) sampai (v) adalah x, sedangkan peubah terikatnya adalah y, yang merupakan fungsi dari x, atau ditulis sebagai y = g(x). Berdasarkan turunan tertinggi yang terdapat di dalam persamaannya, PDB dapat lagi dikelompokkan menurut ordenya, yaitu: PDB orde 1, yaitu PDB yang turunan tertingginya adalah turunan pertama. Contoh (i), (ii), dan (iii) di atas adalah PDB orde 1. PDB orde 2, yaitu PDB yang turunan tertingginya adalah turunan kedua. Contoh (iv) adalah PDB orde dua. PDB orde 3, yaitu PDB yang turunan tertingginya adalah turunan ketiga Contoh (v) di atas adalah PDB orde tiga. dan seterusnya untuk PDB dengan orde yang lebih tinggi. PDB orde 2 ke atas dinamakan juga PDB orde lanjut. contoh: diketahui fungsi polinomial tingkat 4 y=-0,5x^{4}+4x^{3}-10x^{2}+8,5x+1 diperoleh ODE: \\dfrac{dy}{dx}=-2x^{3}+12x^{2}-10x+1, 5 Terdapat beberapa metode numerik yang sering digunakan untuk menghitung solusi PDB, mulai dari metode yang paling dasar sampai dengan metode yang lebih teliti, yaitu: Metode Euler Metode Heun Metode Deret Taylor Metode Runge-Kutta Metode predictor-corrector. B. menghitung solusi PDB \u00b6 Metode Euler \u00b6 Metode Euler merupakan metode paling sederhana yang diturunkan dari deret Taylor. diberikan PDB orde satu y'=\\dfrac{dy}{dx}=f\\left( x,y\\right) dan nilai awal y(x0) = y0 misalkan y_{r}=y\\left( x_{r}\\right) adalah himpunan nilai y di Xr yang dihitung dengan metode Euler. Dalam hal ini x_{r}=x_{0}+rh\\,|\\\\ r=0,1,2,...n. Metoda Euler diturunkan dengan cara menguraikan y(xr+1) di sekitar xr ke dalam deret Taylor: y\\left( x_{r+1}\\right) =y\\left( x_{r}\\right) +\\dfrac{\\left( x_{r+1}-x_{r}\\right) }{1!}y^{'}( x_{r}) +\\dfrac{\\left( x_{r+1}-x_{r}\\right) }{2!}^{2}y^{''}( x_{r})+...(P.8.5) Bila persamaan (P.8.5) dipotong sampai suku orde tiga, diperoleh y\\left( x_{r+1}\\right) =y\\left( x_{r}\\right) +\\dfrac{\\left( x_{r+1}-x_{r}\\right) }{1!}y^{'}( x_{r}) +\\dfrac{\\left( x_{r+1}-x_{r}\\right) }{2!}^{2}y^{''}( t),x_{r} <t <x_{r+1}(P.8.6) Berdasarkan persamaan (P.8.4), y'\\left( x_{r}\\right) =f\\left( x_{r},y_{r}\\right) dan x_{r+1}-x_{r}=h maka persamaan (P.8.6) dapat ditulis menjadi y\\left( x_{r+1}\\right) \\approx y\\left( x_{r}\\right) +hf\\left( x_{r},y_{r}\\right) +\\dfrac{h^{2}}{2}y^{''}\\left( t\\right)(P.8.7) Dua suku pertama persamaan (P.8.7), yaitu y\\left( x_{r+1}\\right) \\approx y\\left( x_{r}\\right) +hf\\left( x_{r},y_{r}\\right);r=0,1,2,...,n (P.8.8) menyatakan metode Euler atau metode Euler-Cauchy. Metode Euler disebut juga metode orde-pertama, karena pada persamaan (P.8.7) kita hanya mengambil sampai suku orde pertama saja. Untuk menyederhanakan penulisan, persamaan (P.8.8) dapat juga ditulis lebih singkat sebagai y_{r+1}=y_{r}+hf_{r} Analisis Galat Metode Euler Meskipun metode Euler sederhana, tetapi ia mengandung dua macam galat, yaitu galat pemotongan (truncation error) dan galat longgokan (cumulative error). Galat pemotongan dapat langsung ditentukan dari persamaan (P.8.7), yaitu E_{p}\\approx \\dfrac{1}{2}h^{2}y^{1}\\left( t\\right) = O\\left( h^{2}\\right)(P.8.9) Galat pemotongan ini sebanding dengan kuadrat ukuran langkah h sehingga disebut juga galat per langkah (error per step) atau galat lokal. Semakin kecil nilai h (yang berarti semakin banyak langkah perhitungan), semakin kecil pula galat hasil perhitungannya. Perhatikan bahwa nilai pada setiap langkah (yr) dipakai lagi pada langkah berikutnya (yr+1). Galat solusi pada langkah ke-r adalah tumpukan galat dari langkah-langkah sebelumnya. Galat yang terkumpul pada akhir langkah ke-r ini disebut galat longgokan (cumulative error). Jika langkah dimulai dari x0 = a dan berakhir di xn= b maka total galat yang terkumpul pada solusi akhir (yn) adalah E_{tot}=\\sum ^{n}_{r=1}\\left( \\dfrac{1}{2}\\right) h^{2}y^{''}\\left( t\\right) =n\\dfrac{h^{1}}{2}y^{''}\\left( t\\right) =\\dfrac{\\left( b-a\\right) }{2h}h^{2}y^{11}=\\dfrac{\\left( b-a\\right) }{2h}h^{2}y''\\left( t\\right) =\\dfrac{\\left( b-a\\right) }{2}y^{i}\\left( t\\right) h (P.8.10) Galat longgokan total ini sebenarnya adalah E_{tot}=y\\left( b\\right) _{sejati}-y\\left( x_{n}\\right) _{Euler} Persamaan (P.8.10) menyatakan bahwa galat longgokan sebanding dengan h. Ini berarti metode Euler memberikan hampiran solusi yang buruk, sehingga dalam praktek metode ini kurang disukai, namun metode ini membantu untuk memahami gagasan dasar metode penyelesaian PDB dengan orde yang lebih tinggi. Pengurangan h dapat meningkatkan ketelitian hasil, namun pengurangan h tanpa penggunaan bilangan berketelitian ganda tidaklah menguntungkan karena galat numerik meningkat disebabkan oleh galat pembulatan [NAK93]. Selain galat pemotongan, solusi PDB juga mengandung galat pembulatan, yang mempengaruhi ketelitian nilai y1, y2, \u2026, semakin lama semakin buruk dengan meningkatnya n. contoh : Diketahui PDB \\dfrac{dy}{dx}=x+y,y\\left( 0\\right) =1 Gunakan metode Euler untuk menghitung y(0,10) dengan ukuran langkah h = 0.05 dan h = 0.02. Jumlah angka bena = 5. Diketahui solusi sejati PDB tersebut adalah y(x) = ex - x - 1. penyelesaian: Diketahui a = x0 = 0 b = 0.10 h = 0.05 Dalam hal ini, f(x, y) = x + y, dan penerapan metode Euler pada PDB tersebut menjadi y_{r+1}=y_{r}+0.02\\left( x_{r}+y_{r}\\right) Langkah-langkah: x_{0}=0\\rightarrow y_{0}=1\\\\ x_{1}=0.05\\rightarrow y_{1}=y_{0}+0.05(x_{0}+y_{0})=1+(0.05)(0+1)=1.0050\\\\ x_{2}=0.10\\rightarrow y_{2}=y_{1}+0.05(x_{1}+y_{1})=1.0050+(0.05)(0.05+1.0050)=1.005775 Jadi, y(0.10) \u2248 1.05775. Bandingkan dengan nilai solusi sejatinya y\\left( 0.10\\right) =C^{0.10}-0.01-1=1.1103 sehingga galatnya adalah galat = 1.1103 - 1.05775 = 0.05255 ) Diketahui a = x0 = 0 b = 0.10 h = 0.02 Dalam hal ini, f(x, y) = x + y, dan penerapan metode Euler pada PDB tersebut menjadi y_{r+1}=y_{r}+0.02\\left( x_{r}+y_{r}\\right) Langkah-langkah: x_{0}=0\\rightarrow y_{0}=1\\\\ x_{1}=0.02\\rightarrow y_{1}=y_{0}+0.02(x_{0}+y_{0})=1+(0.02)(0+1)=1.0200\\\\ x_{2}=0.04\\rightarrow y_{2}=y_{1}+0.02(x_{1}+y_{1})=1.0200+(0.02)(0.02+1.0200)=1.0408\\\\ x_{3}=0.06\\rightarrow y_{0}=1.0624\\\\ x_{4}=0.08\\rightarrow y_{0}=1.0848\\\\ x_{5}=0.10\\rightarrow y_{0}=1.1081 Jadi, y (0,10) \u2248 1.1081 Bandingkan dengan solusi sejatinya, y (0.10) = 1.1103 sehingga galatnya adalah galat = 1.1103 - 1.1081 = 1.1081 ) Contoh diatas memperlihatkan bahwa kita dapat mengurangi galat dengan memperbanyak langkah (memperkecil h).","title":"Numerical Solution of Ordinary Differential Equations"},{"location":"persamaan-differensial/#persamaan_differensial_biasa_ordinary_differential_equations_ode","text":"","title":"Persamaan Differensial Biasa (Ordinary Differential Equations (ODE))"},{"location":"persamaan-differensial/#a_persamaan_differensial_biasa","text":"Persamaan Differensial adalah Persamaan yang mengandung beberapa turunan dari suatu fungsi yang tidak diketahui. Sedangkan Persamaan Differensial Biasa adalah Persamaan yang mempunyai fungsi satu variable bebas. \\dfrac{dy}{dx}+y=x^{2} xy\\left( \\dfrac{d^{3}y}{dx^{3}}\\right) ^{2}+\\sin \\left( \\dfrac{d^{2}y}{dx^{2}}\\right) +8x^{2}y\\left( \\dfrac{dx}{dy}\\right) +x^{2}=0 Persamaan Differensial Biasa (Ordinary Differential Equations (ODE)) digunakan untuk mendapatkan formulasi suatu fenomena yang mengalami perubahan terhadap waktu atau tempat orde turunan tertinggi dari fungsi yang terlibat dalam persamaan diferensial. orde 2: \\dfrac{d^{2}y}{dt^{2}} orde 3: \\dfrac{d^{3}x}{dt^{3}} derajat pangkat dari turunan tertinggi fungsi yang terlibat dalam persamaan. derajat 2: xy\\left( \\dfrac{d^{3}y}{dx^{3}}\\right) ^{2} contoh persamaan berikut adalah persamaan diferensial biasa (PDB): i).\\dfrac{dy}{dx}=x+y ii).y^{'}=x^{2}+y^{2} iii).2\\dfrac{dy}{dx}+x^{2}y-y=0 iv).y^{''}+y^{'}\\cos x-3y=\\sin 2\\times v).2y^{'''}-23y^{'}=1-y^{''} Peubah bebas untuk contoh (i) sampai (v) adalah x, sedangkan peubah terikatnya adalah y, yang merupakan fungsi dari x, atau ditulis sebagai y = g(x). Berdasarkan turunan tertinggi yang terdapat di dalam persamaannya, PDB dapat lagi dikelompokkan menurut ordenya, yaitu: PDB orde 1, yaitu PDB yang turunan tertingginya adalah turunan pertama. Contoh (i), (ii), dan (iii) di atas adalah PDB orde 1. PDB orde 2, yaitu PDB yang turunan tertingginya adalah turunan kedua. Contoh (iv) adalah PDB orde dua. PDB orde 3, yaitu PDB yang turunan tertingginya adalah turunan ketiga Contoh (v) di atas adalah PDB orde tiga. dan seterusnya untuk PDB dengan orde yang lebih tinggi. PDB orde 2 ke atas dinamakan juga PDB orde lanjut. contoh: diketahui fungsi polinomial tingkat 4 y=-0,5x^{4}+4x^{3}-10x^{2}+8,5x+1 diperoleh ODE: \\dfrac{dy}{dx}=-2x^{3}+12x^{2}-10x+1, 5 Terdapat beberapa metode numerik yang sering digunakan untuk menghitung solusi PDB, mulai dari metode yang paling dasar sampai dengan metode yang lebih teliti, yaitu: Metode Euler Metode Heun Metode Deret Taylor Metode Runge-Kutta Metode predictor-corrector.","title":"A. Persamaan Differensial Biasa"},{"location":"persamaan-differensial/#b_menghitung_solusi_pdb","text":"","title":"B. menghitung solusi PDB"},{"location":"persamaan-differensial/#metode_euler","text":"Metode Euler merupakan metode paling sederhana yang diturunkan dari deret Taylor. diberikan PDB orde satu y'=\\dfrac{dy}{dx}=f\\left( x,y\\right) dan nilai awal y(x0) = y0 misalkan y_{r}=y\\left( x_{r}\\right) adalah himpunan nilai y di Xr yang dihitung dengan metode Euler. Dalam hal ini x_{r}=x_{0}+rh\\,|\\\\ r=0,1,2,...n. Metoda Euler diturunkan dengan cara menguraikan y(xr+1) di sekitar xr ke dalam deret Taylor: y\\left( x_{r+1}\\right) =y\\left( x_{r}\\right) +\\dfrac{\\left( x_{r+1}-x_{r}\\right) }{1!}y^{'}( x_{r}) +\\dfrac{\\left( x_{r+1}-x_{r}\\right) }{2!}^{2}y^{''}( x_{r})+...(P.8.5) Bila persamaan (P.8.5) dipotong sampai suku orde tiga, diperoleh y\\left( x_{r+1}\\right) =y\\left( x_{r}\\right) +\\dfrac{\\left( x_{r+1}-x_{r}\\right) }{1!}y^{'}( x_{r}) +\\dfrac{\\left( x_{r+1}-x_{r}\\right) }{2!}^{2}y^{''}( t),x_{r} <t <x_{r+1}(P.8.6) Berdasarkan persamaan (P.8.4), y'\\left( x_{r}\\right) =f\\left( x_{r},y_{r}\\right) dan x_{r+1}-x_{r}=h maka persamaan (P.8.6) dapat ditulis menjadi y\\left( x_{r+1}\\right) \\approx y\\left( x_{r}\\right) +hf\\left( x_{r},y_{r}\\right) +\\dfrac{h^{2}}{2}y^{''}\\left( t\\right)(P.8.7) Dua suku pertama persamaan (P.8.7), yaitu y\\left( x_{r+1}\\right) \\approx y\\left( x_{r}\\right) +hf\\left( x_{r},y_{r}\\right);r=0,1,2,...,n (P.8.8) menyatakan metode Euler atau metode Euler-Cauchy. Metode Euler disebut juga metode orde-pertama, karena pada persamaan (P.8.7) kita hanya mengambil sampai suku orde pertama saja. Untuk menyederhanakan penulisan, persamaan (P.8.8) dapat juga ditulis lebih singkat sebagai y_{r+1}=y_{r}+hf_{r} Analisis Galat Metode Euler Meskipun metode Euler sederhana, tetapi ia mengandung dua macam galat, yaitu galat pemotongan (truncation error) dan galat longgokan (cumulative error). Galat pemotongan dapat langsung ditentukan dari persamaan (P.8.7), yaitu E_{p}\\approx \\dfrac{1}{2}h^{2}y^{1}\\left( t\\right) = O\\left( h^{2}\\right)(P.8.9) Galat pemotongan ini sebanding dengan kuadrat ukuran langkah h sehingga disebut juga galat per langkah (error per step) atau galat lokal. Semakin kecil nilai h (yang berarti semakin banyak langkah perhitungan), semakin kecil pula galat hasil perhitungannya. Perhatikan bahwa nilai pada setiap langkah (yr) dipakai lagi pada langkah berikutnya (yr+1). Galat solusi pada langkah ke-r adalah tumpukan galat dari langkah-langkah sebelumnya. Galat yang terkumpul pada akhir langkah ke-r ini disebut galat longgokan (cumulative error). Jika langkah dimulai dari x0 = a dan berakhir di xn= b maka total galat yang terkumpul pada solusi akhir (yn) adalah E_{tot}=\\sum ^{n}_{r=1}\\left( \\dfrac{1}{2}\\right) h^{2}y^{''}\\left( t\\right) =n\\dfrac{h^{1}}{2}y^{''}\\left( t\\right) =\\dfrac{\\left( b-a\\right) }{2h}h^{2}y^{11}=\\dfrac{\\left( b-a\\right) }{2h}h^{2}y''\\left( t\\right) =\\dfrac{\\left( b-a\\right) }{2}y^{i}\\left( t\\right) h (P.8.10) Galat longgokan total ini sebenarnya adalah E_{tot}=y\\left( b\\right) _{sejati}-y\\left( x_{n}\\right) _{Euler} Persamaan (P.8.10) menyatakan bahwa galat longgokan sebanding dengan h. Ini berarti metode Euler memberikan hampiran solusi yang buruk, sehingga dalam praktek metode ini kurang disukai, namun metode ini membantu untuk memahami gagasan dasar metode penyelesaian PDB dengan orde yang lebih tinggi. Pengurangan h dapat meningkatkan ketelitian hasil, namun pengurangan h tanpa penggunaan bilangan berketelitian ganda tidaklah menguntungkan karena galat numerik meningkat disebabkan oleh galat pembulatan [NAK93]. Selain galat pemotongan, solusi PDB juga mengandung galat pembulatan, yang mempengaruhi ketelitian nilai y1, y2, \u2026, semakin lama semakin buruk dengan meningkatnya n. contoh : Diketahui PDB \\dfrac{dy}{dx}=x+y,y\\left( 0\\right) =1 Gunakan metode Euler untuk menghitung y(0,10) dengan ukuran langkah h = 0.05 dan h = 0.02. Jumlah angka bena = 5. Diketahui solusi sejati PDB tersebut adalah y(x) = ex - x - 1. penyelesaian: Diketahui a = x0 = 0 b = 0.10 h = 0.05 Dalam hal ini, f(x, y) = x + y, dan penerapan metode Euler pada PDB tersebut menjadi y_{r+1}=y_{r}+0.02\\left( x_{r}+y_{r}\\right) Langkah-langkah: x_{0}=0\\rightarrow y_{0}=1\\\\ x_{1}=0.05\\rightarrow y_{1}=y_{0}+0.05(x_{0}+y_{0})=1+(0.05)(0+1)=1.0050\\\\ x_{2}=0.10\\rightarrow y_{2}=y_{1}+0.05(x_{1}+y_{1})=1.0050+(0.05)(0.05+1.0050)=1.005775 Jadi, y(0.10) \u2248 1.05775. Bandingkan dengan nilai solusi sejatinya y\\left( 0.10\\right) =C^{0.10}-0.01-1=1.1103 sehingga galatnya adalah galat = 1.1103 - 1.05775 = 0.05255 ) Diketahui a = x0 = 0 b = 0.10 h = 0.02 Dalam hal ini, f(x, y) = x + y, dan penerapan metode Euler pada PDB tersebut menjadi y_{r+1}=y_{r}+0.02\\left( x_{r}+y_{r}\\right) Langkah-langkah: x_{0}=0\\rightarrow y_{0}=1\\\\ x_{1}=0.02\\rightarrow y_{1}=y_{0}+0.02(x_{0}+y_{0})=1+(0.02)(0+1)=1.0200\\\\ x_{2}=0.04\\rightarrow y_{2}=y_{1}+0.02(x_{1}+y_{1})=1.0200+(0.02)(0.02+1.0200)=1.0408\\\\ x_{3}=0.06\\rightarrow y_{0}=1.0624\\\\ x_{4}=0.08\\rightarrow y_{0}=1.0848\\\\ x_{5}=0.10\\rightarrow y_{0}=1.1081 Jadi, y (0,10) \u2248 1.1081 Bandingkan dengan solusi sejatinya, y (0.10) = 1.1103 sehingga galatnya adalah galat = 1.1103 - 1.1081 = 1.1081 ) Contoh diatas memperlihatkan bahwa kita dapat mengurangi galat dengan memperbanyak langkah (memperkecil h).","title":"Metode Euler"}]}